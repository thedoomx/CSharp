#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Week10Day01")]
	public partial class BookDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAuthor(Author instance);
    partial void UpdateAuthor(Author instance);
    partial void DeleteAuthor(Author instance);
    partial void InsertBookAuthor(BookAuthor instance);
    partial void UpdateBookAuthor(BookAuthor instance);
    partial void DeleteBookAuthor(BookAuthor instance);
    partial void InsertBookGenre(BookGenre instance);
    partial void UpdateBookGenre(BookGenre instance);
    partial void DeleteBookGenre(BookGenre instance);
    partial void InsertBookCopy(BookCopy instance);
    partial void UpdateBookCopy(BookCopy instance);
    partial void DeleteBookCopy(BookCopy instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertBookUser(BookUser instance);
    partial void UpdateBookUser(BookUser instance);
    partial void DeleteBookUser(BookUser instance);
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public BookDBDataContext() : 
				base(global::Test.Properties.Settings.Default.Week10Day01ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BookDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BookDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BookDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BookDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Author> Authors
		{
			get
			{
				return this.GetTable<Author>();
			}
		}
		
		public System.Data.Linq.Table<BookAuthor> BookAuthors
		{
			get
			{
				return this.GetTable<BookAuthor>();
			}
		}
		
		public System.Data.Linq.Table<BookGenre> BookGenres
		{
			get
			{
				return this.GetTable<BookGenre>();
			}
		}
		
		public System.Data.Linq.Table<BookCopy> BookCopies
		{
			get
			{
				return this.GetTable<BookCopy>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<BookUser> BookUsers
		{
			get
			{
				return this.GetTable<BookUser>();
			}
		}
		
		public System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Authors")]
	public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _YearBorn;
		
		private System.Nullable<System.DateTime> _YearDied;
		
		private EntitySet<BookAuthor> _BookAuthors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnYearBornChanging(System.Nullable<System.DateTime> value);
    partial void OnYearBornChanged();
    partial void OnYearDiedChanging(System.Nullable<System.DateTime> value);
    partial void OnYearDiedChanged();
    #endregion
		
		public Author()
		{
			this._BookAuthors = new EntitySet<BookAuthor>(new Action<BookAuthor>(this.attach_BookAuthors), new Action<BookAuthor>(this.detach_BookAuthors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(12) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(12) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearBorn", DbType="Date")]
		public System.Nullable<System.DateTime> YearBorn
		{
			get
			{
				return this._YearBorn;
			}
			set
			{
				if ((this._YearBorn != value))
				{
					this.OnYearBornChanging(value);
					this.SendPropertyChanging();
					this._YearBorn = value;
					this.SendPropertyChanged("YearBorn");
					this.OnYearBornChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearDied", DbType="Date")]
		public System.Nullable<System.DateTime> YearDied
		{
			get
			{
				return this._YearDied;
			}
			set
			{
				if ((this._YearDied != value))
				{
					this.OnYearDiedChanging(value);
					this.SendPropertyChanging();
					this._YearDied = value;
					this.SendPropertyChanged("YearDied");
					this.OnYearDiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_BookAuthor", Storage="_BookAuthors", ThisKey="ID", OtherKey="AuthorID")]
		public EntitySet<BookAuthor> BookAuthors
		{
			get
			{
				return this._BookAuthors;
			}
			set
			{
				this._BookAuthors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookAuthors(BookAuthor entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_BookAuthors(BookAuthor entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookAuthors")]
	public partial class BookAuthor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookID;
		
		private int _AuthorID;
		
		private EntityRef<Author> _Author;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnAuthorIDChanging(int value);
    partial void OnAuthorIDChanged();
    #endregion
		
		public BookAuthor()
		{
			this._Author = default(EntityRef<Author>);
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					if (this._Author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_BookAuthor", Storage="_Author", ThisKey="AuthorID", OtherKey="ID", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.BookAuthors.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.BookAuthors.Add(this);
						this._AuthorID = value.ID;
					}
					else
					{
						this._AuthorID = default(int);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookAuthor", Storage="_Book", ThisKey="BookID", OtherKey="ID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.BookAuthors.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.BookAuthors.Add(this);
						this._BookID = value.ID;
					}
					else
					{
						this._BookID = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookGenres")]
	public partial class BookGenre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookID;
		
		private int _GenreID;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<Genre> _Genre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnGenreIDChanging(int value);
    partial void OnGenreIDChanged();
    #endregion
		
		public BookGenre()
		{
			this._Book = default(EntityRef<Book>);
			this._Genre = default(EntityRef<Genre>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookGenre", Storage="_Book", ThisKey="BookID", OtherKey="ID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.BookGenres.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.BookGenres.Add(this);
						this._BookID = value.ID;
					}
					else
					{
						this._BookID = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_BookGenre", Storage="_Genre", ThisKey="GenreID", OtherKey="ID", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.BookGenres.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.BookGenres.Add(this);
						this._GenreID = value.ID;
					}
					else
					{
						this._GenreID = default(int);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookCopies")]
	public partial class BookCopy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CopyID;
		
		private int _BookID;
		
		private EntitySet<BookUser> _BookUsers;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCopyIDChanging(int value);
    partial void OnCopyIDChanged();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    #endregion
		
		public BookCopy()
		{
			this._BookUsers = new EntitySet<BookUser>(new Action<BookUser>(this.attach_BookUsers), new Action<BookUser>(this.detach_BookUsers));
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CopyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CopyID
		{
			get
			{
				return this._CopyID;
			}
			set
			{
				if ((this._CopyID != value))
				{
					this.OnCopyIDChanging(value);
					this.SendPropertyChanging();
					this._CopyID = value;
					this.SendPropertyChanged("CopyID");
					this.OnCopyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="Int NOT NULL")]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookCopy_BookUser", Storage="_BookUsers", ThisKey="CopyID", OtherKey="CopyID")]
		public EntitySet<BookUser> BookUsers
		{
			get
			{
				return this._BookUsers;
			}
			set
			{
				this._BookUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookCopy", Storage="_Book", ThisKey="BookID", OtherKey="ID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.BookCopies.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.BookCopies.Add(this);
						this._BookID = value.ID;
					}
					else
					{
						this._BookID = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookUsers(BookUser entity)
		{
			this.SendPropertyChanging();
			entity.BookCopy = this;
		}
		
		private void detach_BookUsers(BookUser entity)
		{
			this.SendPropertyChanging();
			entity.BookCopy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Books")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private string _BookResume;
		
		private System.Nullable<System.DateTime> _DatePublished;
		
		private int _Pages;
		
		private string _ISBN;
		
		private EntitySet<BookAuthor> _BookAuthors;
		
		private EntitySet<BookGenre> _BookGenres;
		
		private EntitySet<BookCopy> _BookCopies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBookResumeChanging(string value);
    partial void OnBookResumeChanged();
    partial void OnDatePublishedChanging(System.Nullable<System.DateTime> value);
    partial void OnDatePublishedChanged();
    partial void OnPagesChanging(int value);
    partial void OnPagesChanged();
    partial void OnISBNChanging(string value);
    partial void OnISBNChanged();
    #endregion
		
		public Book()
		{
			this._BookAuthors = new EntitySet<BookAuthor>(new Action<BookAuthor>(this.attach_BookAuthors), new Action<BookAuthor>(this.detach_BookAuthors));
			this._BookGenres = new EntitySet<BookGenre>(new Action<BookGenre>(this.attach_BookGenres), new Action<BookGenre>(this.detach_BookGenres));
			this._BookCopies = new EntitySet<BookCopy>(new Action<BookCopy>(this.attach_BookCopies), new Action<BookCopy>(this.detach_BookCopies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookResume", DbType="NVarChar(50)")]
		public string BookResume
		{
			get
			{
				return this._BookResume;
			}
			set
			{
				if ((this._BookResume != value))
				{
					this.OnBookResumeChanging(value);
					this.SendPropertyChanging();
					this._BookResume = value;
					this.SendPropertyChanged("BookResume");
					this.OnBookResumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePublished", DbType="Date")]
		public System.Nullable<System.DateTime> DatePublished
		{
			get
			{
				return this._DatePublished;
			}
			set
			{
				if ((this._DatePublished != value))
				{
					this.OnDatePublishedChanging(value);
					this.SendPropertyChanging();
					this._DatePublished = value;
					this.SendPropertyChanged("DatePublished");
					this.OnDatePublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pages", DbType="Int NOT NULL")]
		public int Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				if ((this._Pages != value))
				{
					this.OnPagesChanging(value);
					this.SendPropertyChanging();
					this._Pages = value;
					this.SendPropertyChanged("Pages");
					this.OnPagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISBN", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ISBN
		{
			get
			{
				return this._ISBN;
			}
			set
			{
				if ((this._ISBN != value))
				{
					this.OnISBNChanging(value);
					this.SendPropertyChanging();
					this._ISBN = value;
					this.SendPropertyChanged("ISBN");
					this.OnISBNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookAuthor", Storage="_BookAuthors", ThisKey="ID", OtherKey="BookID")]
		public EntitySet<BookAuthor> BookAuthors
		{
			get
			{
				return this._BookAuthors;
			}
			set
			{
				this._BookAuthors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookGenre", Storage="_BookGenres", ThisKey="ID", OtherKey="BookID")]
		public EntitySet<BookGenre> BookGenres
		{
			get
			{
				return this._BookGenres;
			}
			set
			{
				this._BookGenres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookCopy", Storage="_BookCopies", ThisKey="ID", OtherKey="BookID")]
		public EntitySet<BookCopy> BookCopies
		{
			get
			{
				return this._BookCopies;
			}
			set
			{
				this._BookCopies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookAuthors(BookAuthor entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_BookAuthors(BookAuthor entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_BookGenres(BookGenre entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_BookGenres(BookGenre entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_BookCopies(BookCopy entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_BookCopies(BookCopy entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookUsers")]
	public partial class BookUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CopyID;
		
		private int _UserID;
		
		private System.Nullable<System.DateTime> _TakenDate;
		
		private System.Nullable<System.DateTime> _ReturnDate;
		
		private EntityRef<BookCopy> _BookCopy;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCopyIDChanging(int value);
    partial void OnCopyIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTakenDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTakenDateChanged();
    partial void OnReturnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReturnDateChanged();
    #endregion
		
		public BookUser()
		{
			this._BookCopy = default(EntityRef<BookCopy>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CopyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CopyID
		{
			get
			{
				return this._CopyID;
			}
			set
			{
				if ((this._CopyID != value))
				{
					if (this._BookCopy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCopyIDChanging(value);
					this.SendPropertyChanging();
					this._CopyID = value;
					this.SendPropertyChanged("CopyID");
					this.OnCopyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TakenDate", DbType="Date")]
		public System.Nullable<System.DateTime> TakenDate
		{
			get
			{
				return this._TakenDate;
			}
			set
			{
				if ((this._TakenDate != value))
				{
					this.OnTakenDateChanging(value);
					this.SendPropertyChanging();
					this._TakenDate = value;
					this.SendPropertyChanged("TakenDate");
					this.OnTakenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReturnDate
		{
			get
			{
				return this._ReturnDate;
			}
			set
			{
				if ((this._ReturnDate != value))
				{
					this.OnReturnDateChanging(value);
					this.SendPropertyChanging();
					this._ReturnDate = value;
					this.SendPropertyChanged("ReturnDate");
					this.OnReturnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookCopy_BookUser", Storage="_BookCopy", ThisKey="CopyID", OtherKey="CopyID", IsForeignKey=true)]
		public BookCopy BookCopy
		{
			get
			{
				return this._BookCopy.Entity;
			}
			set
			{
				BookCopy previousValue = this._BookCopy.Entity;
				if (((previousValue != value) 
							|| (this._BookCopy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookCopy.Entity = null;
						previousValue.BookUsers.Remove(this);
					}
					this._BookCopy.Entity = value;
					if ((value != null))
					{
						value.BookUsers.Add(this);
						this._CopyID = value.CopyID;
					}
					else
					{
						this._CopyID = default(int);
					}
					this.SendPropertyChanged("BookCopy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BookUser", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BookUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BookUsers.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genres")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<BookGenre> _BookGenres;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Genre()
		{
			this._BookGenres = new EntitySet<BookGenre>(new Action<BookGenre>(this.attach_BookGenres), new Action<BookGenre>(this.detach_BookGenres));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_BookGenre", Storage="_BookGenres", ThisKey="ID", OtherKey="GenreID")]
		public EntitySet<BookGenre> BookGenres
		{
			get
			{
				return this._BookGenres;
			}
			set
			{
				this._BookGenres.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookGenres(BookGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_BookGenres(BookGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Pseudonim;
		
		private string _Email;
		
		private System.Nullable<int> _Phone;
		
		private EntitySet<BookUser> _BookUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPseudonimChanging(string value);
    partial void OnPseudonimChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(System.Nullable<int> value);
    partial void OnPhoneChanged();
    #endregion
		
		public User()
		{
			this._BookUsers = new EntitySet<BookUser>(new Action<BookUser>(this.attach_BookUsers), new Action<BookUser>(this.detach_BookUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(12) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(12) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pseudonim", DbType="NVarChar(10)")]
		public string Pseudonim
		{
			get
			{
				return this._Pseudonim;
			}
			set
			{
				if ((this._Pseudonim != value))
				{
					this.OnPseudonimChanging(value);
					this.SendPropertyChanging();
					this._Pseudonim = value;
					this.SendPropertyChanged("Pseudonim");
					this.OnPseudonimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(20)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Int")]
		public System.Nullable<int> Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BookUser", Storage="_BookUsers", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<BookUser> BookUsers
		{
			get
			{
				return this._BookUsers;
			}
			set
			{
				this._BookUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookUsers(BookUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BookUsers(BookUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
